#!/usr/bin/env bash

# VS Code Hash Fixer and Update Script
# Fixes missing hashes and updates VS Code to latest version

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
NIXPKGS_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
VSCODE_CONFIG="$NIXPKGS_DIR/home/vscode.nix"

echo "üöÄ VS Code Hash Fixer and Update Script"

# Helper to resolve real commit SHA of a tag (annotated or lightweight)
resolve_commit() {
    local tag="$1"
    # Try to get peeled commit (^{}) first (works for annotated tag)
    local peeled
    peeled=$(git ls-remote https://github.com/microsoft/vscode.git "refs/tags/${tag}^{}" 2>/dev/null | awk '{print $1}' || true)
    if [ -n "${peeled}" ]; then
        echo "$peeled"
        return 0
    fi
    # Fallback: lightweight tag sha
    local direct
    direct=$(git ls-remote https://github.com/microsoft/vscode.git "refs/tags/${tag}" 2>/dev/null | awk '{print $1}' || true)
    if [ -n "${direct}" ]; then
        echo "$direct"
        return 0
    fi
    return 1
}

# Extract current version
CURRENT_VERSION=$(grep 'version = "' "$VSCODE_CONFIG" | sed -E 's/.*version = "([^"]+)".*/\1/' | head -1 || true)
echo "üìã Current version in config: ${CURRENT_VERSION:-unknown}"

# Latest release tag
echo "üåê Fetching latest VS Code release tag..."
LATEST_VERSION=$(curl -fsSL "https://api.github.com/repos/microsoft/vscode/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^\"]+)".*/\1/' | head -1 || true)
if [ -z "${LATEST_VERSION}" ]; then
    echo "‚ùå Could not get latest version tag"
    exit 1
fi

echo "üÜï Latest version tag: $LATEST_VERSION"

# Resolve commit for tag (instead of using target_commitish which is usually 'main')
echo "üîç Resolving commit for tag $LATEST_VERSION ..."
COMMIT_SHA=$(resolve_commit "$LATEST_VERSION" || true)
if [ -z "$COMMIT_SHA" ]; then
    echo "‚ö†Ô∏è  Could not resolve commit from git, falling back to target_commitish (may be 'main')."
    COMMIT_SHA=$(curl -fsSL "https://api.github.com/repos/microsoft/vscode/releases/latest" | grep -o '"target_commitish": "[^"]*"' | cut -d '"' -f4 || echo "main")
fi

echo "üìù Commit SHA: $COMMIT_SHA"

if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
    echo "‚ö° Updating version $CURRENT_VERSION ‚Üí $LATEST_VERSION"
    sed -i.bak "s/version = \".*\";/version = \"$LATEST_VERSION\";/" "$VSCODE_CONFIG"
    sed -i.bak "s/rev = \".*\";/rev = \"$COMMIT_SHA\";/" "$VSCODE_CONFIG"
    rm -f "$VSCODE_CONFIG.bak"
else
    # Still ensure commit updated if changed
    if ! grep -q "rev = \"$COMMIT_SHA\";" "$VSCODE_CONFIG"; then
        echo "‚ôªÔ∏è  Updating commit rev to $COMMIT_SHA"
        sed -i.bak "s/rev = \".*\";/rev = \"$COMMIT_SHA\";/" "$VSCODE_CONFIG"
        rm -f "$VSCODE_CONFIG.bak"
    fi
fi

# Reset both hashes to placeholder
PLACEHOLDER="sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
echo "üî® Resetting hashes to placeholder to trigger mismatch..."
sed -i.bak 's/hash = "sha256-[^"]*"/hash = "'$PLACEHOLDER'"/g' "$VSCODE_CONFIG"
rm -f "$VSCODE_CONFIG.bak"

cd "$NIXPKGS_DIR"

extract_hash() {
    local build_output="$1"
    echo "$build_output" | grep -E "got:\s+sha256-[A-Za-z0-9+/=]+" | tail -1 | sed -E 's/.*got:[[:space:]]+(sha256-[A-Za-z0-9+/=]+).*/\1/'
}

# 1) First build -> main VS Code archive hash mismatch (first occurrence)
echo "üì¶ Determining main VS Code hash..."
MAIN_HASH=""
BUILD_OUTPUT=$(nix build .#darwinConfigurations.TobiasMacbookPro.config.home-manager.users.ts.programs.vscode.package --log-format raw 2>&1 || true)
if echo "$BUILD_OUTPUT" | grep -q "hash mismatch"; then
    MAIN_HASH=$(extract_hash "$BUILD_OUTPUT")
fi
if [ -n "$MAIN_HASH" ]; then
    echo "‚úÖ Main hash: $MAIN_HASH"
    # Replace first occurrence only
    sed -i.bak "0,/hash = \"$PLACEHOLDER\"/ s/hash = \"$PLACEHOLDER\"/hash = \"$MAIN_HASH\"/" "$VSCODE_CONFIG"
    rm -f "$VSCODE_CONFIG.bak"
else
    echo "‚ùå Could not extract main hash"
    echo "$BUILD_OUTPUT" | tail -n 50
    exit 1
fi

# 2) Second build -> VS Code server hash mismatch (second occurrence)
echo "üñ•  Determining VS Code Server hash (Remote SSH)..."
SERVER_HASH=""
BUILD_OUTPUT=$(nix build .#darwinConfigurations.TobiasMacbookPro.config.home-manager.users.ts.programs.vscode.package --log-format raw 2>&1 || true)
if echo "$BUILD_OUTPUT" | grep -q "hash mismatch"; then
    SERVER_HASH=$(extract_hash "$BUILD_OUTPUT")
fi
if [ -n "$SERVER_HASH" ]; then
    echo "‚úÖ Server hash: $SERVER_HASH"
    # Replace second occurrence (skip first)
    sed -i.bak "0,/hash = \"$MAIN_HASH\"/! s/hash = \"$PLACEHOLDER\"/hash = \"$SERVER_HASH\"/" "$VSCODE_CONFIG"
    rm -f "$VSCODE_CONFIG.bak"
else
    echo "‚ùå Could not extract server hash"
    echo "$BUILD_OUTPUT" | tail -n 50
    exit 1
fi

# 3) Final build check
echo "üî® Final build..."
if nix build .#darwinConfigurations.TobiasMacbookPro.config.home-manager.users.ts.programs.vscode.package --log-format raw; then
    echo "üéâ VS Code $LATEST_VERSION (commit $COMMIT_SHA) ready."
    echo "üëâ Run ./bin/apply to apply system configuration."
else
    echo "‚ùå Final build failed. Please inspect above logs."
    exit 1
fi
